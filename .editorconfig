# EditorConfig is awesome:http://EditorConfig.org

# top-most EditorConfig file
root = true

# Don't use tabs for indentation.
[*]
indent_style = tab
# (Please don't specify an indent_size here; that has too many unintended consequences.)

# Code files
[*.{cs,csx,vb,vbx}]
indent_size = 4

# Xml project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# Xml config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# JSON files
[*.json]
indent_size = 2

# Dotnet code style settings:
[*.{cs,vb}]
# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first = true
# Avoid "this." and "Me." if not necessary
dotnet_style_qualification_for_field = false:error
dotnet_style_qualification_for_property = false:error
dotnet_style_qualification_for_method = false:error
dotnet_style_qualification_for_event = false:error

# Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true:error
dotnet_style_predefined_type_for_member_access = false:error


dotnet_style_require_accessibility_modifiers = always:error

# Suggest more modern language features when available
dotnet_style_object_initializer = true:warning
dotnet_style_collection_initializer = true:warning
dotnet_style_coalesce_expression = true:warning
dotnet_style_null_propagation = true:warning
dotnet_style_explicit_tuple_names = true:warning
dotnet_style_prefer_inferred_tuple_names = true:warning
dotnet_style_prefer_inferred_anonymous_type_member_names = true:warning
# CSharp code style settings:
[*.cs]
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async
# Prefer "var" everywhere
csharp_style_var_for_built_in_types = true:warning
csharp_style_var_when_type_is_apparent = true:warning
csharp_style_var_elsewhere = true:warning

# Prefer method-like constructs to have a expression-body
csharp_style_expression_bodied_methods = when_on_single_line:suggestion
csharp_style_expression_bodied_constructors = when_on_single_line:suggestion
csharp_style_expression_bodied_operators = when_on_single_line:suggestion

# Prefer property-like constructs to have an expression-body
csharp_style_expression_bodied_properties = when_on_single_line:suggestion
csharp_style_expression_bodied_indexers = when_on_single_line:suggestion
csharp_style_expression_bodied_accessors = when_on_single_line:suggestion

# Suggest more modern language features when available
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_style_pattern_local_over_anonymous_function = false:error
csharp_prefer_braces = true:error

# Newline settings
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Switch/Case indent settings
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left

# Space settings
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_call_parameter_list_parentheses = false
# csharp_space_between_parentheses = not_applicable
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true


## naming rules and style
# private const fields should be UPPERCASED
dotnet_naming_rule.uppercase_for_private_const_fields.severity = error
dotnet_naming_rule.uppercase_for_private_const_fields.symbols = private_const_fields
dotnet_naming_rule.uppercase_for_private_const_fields.style = upper_case_style

# public const fields should be UPPERCASED
dotnet_naming_rule.uppercase_for_public_const.severity = error
dotnet_naming_rule.uppercase_for_public_const.symbols = public_const_fields
dotnet_naming_rule.uppercase_for_public_const.style = upper_case_style

# internal and private fields should be _camelCase
dotnet_naming_rule.camel_case_for_private_internal_fields.severity = error
dotnet_naming_rule.camel_case_for_private_internal_fields.symbols = private_internal_fields
dotnet_naming_rule.camel_case_for_private_internal_fields.style = camel_case_underscore_style

# async members should be suffixed with Async
dotnet_naming_rule.async_members_async_prefix.severity = error
dotnet_naming_rule.async_members_async_prefix.symbols = async_method
dotnet_naming_rule.async_members_async_prefix.style = end_in_async_style

# non field members should be PascalCased
dotnet_naming_rule.non_filed_members_pascal_cased.severity = error
dotnet_naming_rule.non_filed_members_pascal_cased.symbols = non_field_members
dotnet_naming_rule.non_filed_members_pascal_cased.style = pascal_case_style

# types should be PascalCased
dotnet_naming_rule.types_member_cased.severity = error
dotnet_naming_rule.types_member_cased.symbols = type_symbols
dotnet_naming_rule.types_member_cased.style = pascal_case_style

# interface should begin with I
dotnet_naming_rule.interface_begin_with_I.severity = error
dotnet_naming_rule.interface_begin_with_I.symbols = interface_symbols
dotnet_naming_rule.interface_begin_with_I.style = begin_with_I_style

## symbols
# private, internal fields
dotnet_naming_symbols.private_internal_fields.applicable_kinds = field
dotnet_naming_symbols.private_internal_fields.applicable_accessibilities = private, internal

# private, protected, protected internal const fields
dotnet_naming_symbols.private_const_fields.applicable_kinds = field
dotnet_naming_symbols.private_const_fields.applicable_accessibilities = private, protected, protected_internal
dotnet_naming_symbols.private_const_fields.required_modifiers = const

# public const fields
dotnet_naming_symbols.public_const_fields.applicable_kinds = field
dotnet_naming_symbols.public_const_fields.applicable_accessibilities = public
dotnet_naming_symbols.public_const_fields.required_modifiers = const

# * async methods
dotnet_naming_symbols.async_method.applicable_kinds = method
dotnet_naming_symbols.async_method.applicable_accessibilities = *
dotnet_naming_symbols.async_method.required_modifiers = async

# * event, method, property
dotnet_naming_symbols.non_field_members.applicable_kinds = method, property, event
dotnet_naming_symbols.non_field_members.applicable_accessibilities = *

# class, struct, interface, enum
dotnet_naming_symbols.type_symbols.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.type_symbols.applicable_accessibilities = *

# interface
dotnet_naming_symbols.interface_symbols.applicable_kinds = interface
dotnet_naming_symbols.interface_symbols.applicable_accessibilities = *

## styles
# plain PascalCaseStyle
dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# UPPERCASESTYLE
dotnet_naming_style.upper_case_style.capitalization = all_upper

# EndInAsyncStyleAsync
dotnet_naming_style.end_in_async_style.required_suffix = Async
dotnet_naming_style.end_in_async_style.capitalization = pascal_case

# camelCaseStyle
dotnet_naming_style.camel_case_underscore_style.required_prefix = _
dotnet_naming_style.camel_case_underscore_style.capitalization = camel_case

# IInterface
dotnet_naming_style.begin_with_I_style.required_prefix = I
dotnet_naming_style.begin_with_I_style.capitalization = pascal_case